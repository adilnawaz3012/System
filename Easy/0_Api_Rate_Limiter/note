Ref: https://www.tryexponent.com/blog/rate-limiter-system-design
Youtube: https://www.youtube.com/watch?v=SgWb6tWx3S8&t=1249s
LeetCode: https://leetcode.com/discuss/interview-question/system-design/1616482/System-Design%3A-Rate-Limiter ( have design pic too)
Medium: https://medium.com/geekculture/system-design-design-a-rate-limiter-81d200c9d392
Code for each algorithm: https://medium.com/@tahir.rauf/system-design-rate-limiter-5d3c7171d9af




1. What is Rate LImiter?
2. Why do we need rate limiters?
3. Implement server side vs client side rate limiters: 
    - We have generally 3 places: Client-side, Server-side, or middleware.
    - Client Side:
        - The client is an unreliable place to enforce rate limiting because client requests can easily be forged by malicious actors.
    - Server side
        - Even better than placing it on the server side is to use a rate limiter middleware, which will throttle excess requests even to our server side. So, if you are using a microservice architecture and already using functionalities like authentication middleware, a similar basis you can implement rate limiter middleware alongside it.
        - most comman is using IP address 
            - unique to user
            - narrow down set of IP which have problems
            - user_id can be faked with new accounts
        - need to inform user about it, from server side we sent 429 response code that they have been throtlled.
        - we need to have logging mech in our side to do analysis on tarffic patterns. ( ie retropection )
4. Technique to rate limit: ie algo [ and up and down side of each ]
    - Tocken bucket system
    - Fixed Windown System
    - to overcome fix window, we can use sliding window system
5. If we need to design Twitter, then what algo we will use?
    - use sliding window ( what limit goona set ? => it'll be based on config of system )
    - we can design using Rule Engine
        - size of window
        - # of counter in each window
        - slding scale
        - user_id/ IP
        - geography

6. High Level Design:
    - Consists of few components: [ we'll server side, as client side it can be forged / bypass by malaciuos users ]
        - Rate Limiter Middleware just before server processing
        - Rule Engine [ see above ]
        - Cache ( with high thoughput ) ( to store the behaviuor of each request )
        - in parallel, we can have logging service to save the logs for future analysis
        
7. Drawing: 
    - Api middlewARE  is JUST An IF else statement
    - 

8. Modify it for distributed ENV:
    - Add load balancer before api rate limitter
    - Have multiple rat elimiter based on different data centres
    - What needs to remains const / scale horizontally ( cache ) ie. one comman/ shared cache accross distributed network
    - Cache can be divided into read and write cache 
    - Rules can be diffeent based on the data centre ( rules don't change frequently and persits iver large time )
    - Rate limiter for different geography's ?
        - not a good option as people can use VPN to mimic the other geo and take beinfit of it which will end up bypassing the logic of rate limitting.
        - User's case: user is rate limitted, and user have no malacious intent, what strategy user will use to overcome it?
            - like user using Stripe API ( so user should know stripe limit and user's application tarffic pattern )
                - so user can be right tier to have more access to the API's
            - when user got 429 ,handle it garcefully ( try after sometime / built retrying mechanism )
            - 


